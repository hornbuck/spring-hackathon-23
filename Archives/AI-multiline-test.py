import pygame
import textwrap

# Initialize Pygame
pygame.init()

# Set up the display
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Multiline String Rendering")

#The code below is completely generated by OpenAI's ChatGPT,
#unless otherwise indicated.
# Define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Define font and font size
font_name = "Arial"
font_size = 20
font = pygame.font.SysFont(font_name, font_size)

# Define the multiline string
#changed by a human
multiline_string = "This is a multiline string. It has multiple lines of text. Each line is separated by a period. We will render this string on the screen."

# Calculate the line width and height
line_width = screen_width // 5 #changed by a human
line_height = font_size + 5  # Add some extra padding between lines

def split_multiline_string(string): #changed by a human
    words = string.split('.') #changed by a human
    return words

def calculate_text_position(lines):
    total_height = len(lines) * line_height
    y = (screen_height - total_height) // 2
    return y

def display_multiline_text(lines):
    y = calculate_text_position(lines)
    for i, line in enumerate(lines):
        line += '.' #changed by a human
        text_surface = font.render(line, True, BLACK)
        x = (screen_width - line_width) // 4 #changed by a human
        screen.blit(text_surface, (x, y + i * line_height))

# Split the multiline string into lines
lines = split_multiline_string(multiline_string) #changed by a human

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Clear the screen
    screen.fill(WHITE)

    # Display the multiline text
    display_multiline_text(lines)

    # Update the display
    pygame.display.update()

# Quit the game
pygame.quit()
